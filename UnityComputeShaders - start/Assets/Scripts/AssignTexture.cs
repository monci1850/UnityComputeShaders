using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class AssignTexture : MonoBehaviour
{
    public ComputeShader shader; // assign compute shader in inspector, this case is the shader that generates the texture
    public int texResolution = 256; // texture resolution, this case is 256x256

    Renderer rend; // renderer component to assign texture to
    RenderTexture outputTexture; // texture that will be generated by compute shader

    int kernelHandle;

    // Start is called before the first frame update
    void Start()
    {
        outputTexture = new RenderTexture(texResolution, texResolution, 0); // 0 = no depth buffer
        outputTexture.enableRandomWrite = true; // allow compute shader to write to texture
        outputTexture.Create(); // create texture on GPU, not CPU. [Unity - Scripting API: RenderTexture.Create](https://docs.unity3d.com/ScriptReference/RenderTexture.Create.html)

        rend = GetComponent<Renderer>(); // get renderer component to assign texture to, this case is a quad
        rend.enabled = true; // enable renderer component
        
        InitShader(); // initialize compute shader
    }

    private void InitShader()
    { 
        kernelHandle = shader.FindKernel("CSMain"); // find kernel in compute shader, this case is "CSMain". [Unity - Scripting API: ComputeShader.FindKernel](https://docs.unity3d.com/ScriptReference/ComputeShader.FindKernel.html)
        shader.SetTexture(kernelHandle, "Result", outputTexture); // set texture in compute shader, this case is "Result". [Unity - Scripting API: ComputeShader.SetTexture](https://docs.unity3d.com/ScriptReference/ComputeShader.SetTexture.html)
        rend.material.SetTexture("_MainTex", outputTexture); // set texture in renderer component, this case is "_MainTex". [Unity - Scripting API: Material.SetTexture](https://docs.unity3d.com/ScriptReference/Material.SetTexture.html)
        
        DispatchShader(texResolution/16, texResolution/16); // dispatch compute shader, this case is 16x16x1. 
    }

    private void DispatchShader(int x, int y)
    { 
        shader.Dispatch(kernelHandle, x, y, 1); // dispatch compute shader, this case is 1x1x1. [Unity - Scripting API: ComputeShader.Dispatch](https://docs.unity3d.com/ScriptReference/ComputeShader.Dispatch.html)
    }
    // Update is called once per frame
    void Update()
    {
        if(Input.GetKeyUp(KeyCode.U)) // if U key is pressed, then dispatch compute shader again with a different resolution
        {
            DispatchShader(texResolution/8, texResolution/8); 
        }
    }
}
